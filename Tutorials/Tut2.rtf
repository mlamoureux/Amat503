{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16940\viewh15720\viewkind1
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs22 \cf0 \
AMAT 503 - Tutorial 2 - January 29, 2010. Playing with 1D signals (sound) FFTs .\
\
SOUND:\
\
>> % Aliasing demos:\
>> Fs = 10;  % Sample rate of 10 Hz\
>> dt = 1/Fs; % increments in time\
>> T = 0:dt:1; % one second of time, sampled 10 times per second\
\
>> Y = sin(2*pi*1*T); % A one Hz sine wave\
>> plot(T,Y)\
>> Y = sin(2*pi*2*T); % a two Hz sine wave\
>> plot(T,Y)\
>> plot(T,Y) % the sine wave is not too curvey, but you see 2 full cycles.\
>> Y = sin(2*pi*5*T); % a five Hz sine wave\
>> plot(T,Y) % Uh oh, aliased to something weird\
>> Y = sin(2*pi*9*T); % a nine Hz sine wave\
>> plot(T,Y) % Uh oh, aliased to a one Hz signal (upside down)\
\
>> Fs = 100; % Higher sample rate of 100 Hz\
>> dt = 1/Fs; % increments in time\
>> T = 0:dt:1; % one second of time, sampled 100 times per second\
>> Y = sin(2*pi*1*T); % A one Hz sine wave\
>>  plot(T,Y) % notice the curve is nice and smooth, more sample points\
>> Y = sin(2*pi*2*T); % a two Hz sine wave\
>> plot(T,Y) % notice the curve is nice and smooth, more sample points\
>> Y = sin(2*pi*5*T); % a five Hz sine wave\
>> plot(T,Y) % notice we see 5 cycles. No aliasing since Nyquist = 50Hz\
>> Y = sin(2*pi*50*T); % a 50 Hz sine wave (Nyquist)\
>> plot(T,Y) % Yikes, looks bad\
>> Y = sin(2*pi*99*T); % a 99 Hz sine wave, will get aliased to 1Hz (negative)\
>> plot(T,Y)\
>> Y = sin(2*pi*101*T); % a 101 Hz sine wave, will get aliased to 1 Hz (positive)\
>> plot(T,Y)\
\
>> % Experiments with sound\
>> Fs = 8000;  % Sample rate used in telephones\
>> dt = 1/Fs; % step size\
>> T = 0:dt:1; % one second of samples\
>> A1 = sin(2*pi*440*T); % 440 Hz is A about middle C on piano\
>> sound(A1,Fs) % play the sound, at the right sample rate\
>> sound(A1,10000) % play the sound, at the wrong sample rate\
>> A2 = sin(2*pi*880*T); % 880 is an octave above that first A\
>> sound(A2, Fs) % play the sound\
>> sound(A1+A2, Fs) % play both notes together (note buzzy. Matlab unhappy)\
>> sound((A1+A2)/2, Fs) %  normalize signals to -1 < y < 1, keep MATLAB happy\
>> E2 = sin(2*pi*660*T); % the note E on the piano\
>> sound(E2, Fs)\
>> sound((A1+E2)/2, Fs) % a pretty chord\
\
>> HiNote3 = sin(2*pi*3000*T); % a high note, 3 kHz\
>> sound(HiNote3,Fs)\
>> HiNote5 = sin(2*pi*5000*T); % another high note, 5 kHz\
>> sound(HiNote5, Fs) % HA HA - aliased! Sounds like 3 kHz\
\
>> % Hi quality sound\
>> Fs = 44100; % Sampling rate of 44.1 kHz, CD quality\
>> dt = 1/Fs; % step size\
>> T = 0:dt:1; % one second of sound, at high sample rate\
>> HiNote3 = sin(2*pi*3000*T); % the 3kHz high note, new sample rate\
>> sound(HiNote3, Fs)\
>> HiNote5 = sin(2*pi*5000*T); % the 5kHz high note, new sample rate\
>> sound(HiNote5, Fs) % This should actually sound higher now\
>> % Try out different frequencies. How high can you hear?\
>> sound(sin(2*pi*10000*T),Fs)  % 10 kHz\
>> sound(sin(2*pi*12000*T),Fs)  % 12 kHz\
>> sound(sin(2*pi*14000*T),Fs)  % 14 kHz, old men like me can barely hear this\
>> sound(sin(2*pi*16000*T),Fs)  % 16 kHz, maybe the young women can hear this\
>> sound(sin(2*pi*18000*T),Fs)  % 18 kHz, young children can hear this\
>> sound(sin(2*pi*20000*T),Fs)  % 20 kHz, unlikely the computer speakers can even play this.\
>> sound(sin(2*pi*60*T),Fs) % 60 Hz, typical power line noise\
>> sound(sin(2*pi*30*T),Fs) % 30 Hz, tough to hear\
>> sound(sin(2*pi*20*T),Fs) % 20 Hz, need good speakers, good computer, to generate this\
\
>> % Some short piano notes and a melody\
>> Fs = 44100;\
>> dt = 1/Fs;\
>> T0 = 0:dt:.25; % a quarter of a second\
>> C = sin(2*pi*261.6*T0); % C on the piano\
>> D = sin(2*pi*293.7*T0); % D on the piano\
>> E = sin(2*pi*329.7*T0); % E on the piano\
>> F = sin(2*pi*349.2*T0); % F on the piano\
>> G = sin(2*pi*391.9*T0); % G on the piano\
>> sound([E,D,C,D,E,E,E],Fs); % Mary had a little lamb...\
\
% Project. Write your own melody.\
% Project: Try other periodic functions, beside sine.\
% Project: can you make a square wave? A sawtooth wave? What do they sound like?\
\
FFT: \
Take any of these signals above, fourier transfor, and plot.\
eg >> plot(abs(fft(C+G)))\
You should see spikes in the plot, corresponding to the different notes (frequencies) in the sound.}